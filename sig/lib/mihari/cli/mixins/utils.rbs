module Mihari
  module CLI
    module Mixins
      module Utils
        #
        # Send an exception notification if there is any error in a block
        #
        # @return [Nil]
        #
        def with_error_handling: () { () -> untyped } -> void

        #
        # Check required keys in JSON
        #
        # @param [Hash] json
        #
        # @return [Boolean]
        #
        def required_alert_keys?: (Hash[(String | Symbol), untyped] json) -> bool

        #
        # Load configuration and establish DB connection
        #
        # @return [Hash]
        #
        def load_configuration: () -> Hash[(String | Symbol), untyped]

        #
        # Run analyzer
        #
        # @param [Class<Mihari::Analyzers::Base>] analyzer_class
        # @param [String] query
        # @param [Hash] options
        #
        # @return [nil]
        #
        def run_analyzer: (untyped analyzer_class, query: String query, options: untyped options) -> void

        #
        # Normalize options (reject keys not for analyzers)
        #
        # @param [Hash] options
        #
        # @return [Hash]
        #
        def normalize_options: (Hash[(String | Symbol), untyped] options) -> Hash[(String | Symbol), untyped]
      end
    end
  end
end
