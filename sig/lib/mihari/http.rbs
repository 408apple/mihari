
module Mihari
  class HTTP
    attr_reader uri: URI

    attr_reader headers: Hash[(String | Symbol), untyped]

    attr_reader payload_type: String?

    attr_reader payload: Hash[(String | Symbol), untyped]

    def initialize: (
      String uri,
      ?headers: Hash[(String | Symbol), untyped] headers,
      ?payload_type: String? payload_type,
      ?payload: Hash[(String | Symbol), untyped] payload
    ) -> void

    #
    # Make a GET request
    #
    # @return [Net::HTTPResponse]
    #
    def get: () -> Net::HTTPResponse

    #
    # Make a POST request
    #
    # @return [Net::HTTPResponse]
    #
    def post: () -> Net::HTTPResponse

    def self.get: (
      String uri,
      ?headers: Hash[(String | Symbol), untyped] headers,
      ?payload_type: String? payload_type,
      ?payload: Hash[(String | Symbol), untyped] payload
    ) -> Net::HTTPResponse

    def self.post: (
      String uri,
      ?headers: Hash[(String | Symbol), untyped] headers,
      ?payload_type: String? payload_type,
      ?payload: Hash[(String | Symbol), untyped] payload
    ) -> Net::HTTPResponse

    private

    #
    # Get options for HTTP request
    #
    # @return [Hahs]
    #
    def https_options: () -> ({ use_ssl: ::TrueClass } | ::Hash[untyped, untyped])

    #
    # Make a HTTP request
    #
    # @param [Net::HTTPRequest] req
    #
    # @return [Net::HTTPResponse]
    #
    def request: (untyped req) -> Net::HTTPResponse
  end
end
